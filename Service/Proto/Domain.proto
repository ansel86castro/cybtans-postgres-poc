syntax = "proto3";

package Service;

message AddressDto {
	string street = 1;
	string number = 2;
	string city = 3;
	string state = 4;
	string country = 5;
}

message UserDto {
	string firstName = 1;
	string lastName = 2;
	string email = 3;
	string primaryPhone = 4;
	string secundaryPhone = 5;
	AddressDto address = 6;
	bool isDeleted = 7;
	int32 id = 8;
	datetime createDate = 9 [optional = true];
	datetime updateDate = 10 [optional = true];
}

message UserFollowingsDto {
	int32 followerId = 1;
	int32 followingId = 2;
	UserDto follower = 3;
	UserDto following = 4;
}



message GetAllRequest {
	string filter = 1 [optional = true];
	string sort = 2 [optional = true];
	int32 skip = 3 [optional = true];
	int32 take = 4 [optional = true];
}


// **************************** START User **********************************************

message GetUserRequest {
	int32 id = 1;
}

message UpdateUserRequest {
	int32 id = 1;
	UserDto value = 2 [(ts).partial = true];
}

message DeleteUserRequest{
	int32 id = 1;
}

message GetAllUserResponse {
	repeated UserDto items = 1;
	int64 page = 2;
	int64 totalPages = 3;
	int64 totalCount = 4;
}

message CreateUserRequest {
	UserDto value = 1 [(ts).partial = true];
}

service UserService {
	option (prefix) ="api/User";

	rpc GetAll(GetAllRequest) returns (GetAllUserResponse){		
		option method = "GET";
		
	};

	rpc Get(GetUserRequest) returns (UserDto){	
		option template = "{id}"; 
		option method = "GET";
		
	};

	rpc Create(CreateUserRequest) returns (UserDto){			
		option method = "POST";
		
	};

	rpc Update(UpdateUserRequest) returns (UserDto){			
		option template = "{id}"; 
		option method = "PUT";
		
	};

	rpc Delete(DeleteUserRequest) returns (void){
		option template = "{id}"; 
		option method = "DELETE";
		
	};
}

// **************************** END User **********************************************