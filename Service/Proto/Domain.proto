syntax = "proto3";

package Service;

message CustomerDto {
	option description = "Customer Entity";

	string name = 1 [required = true, description = "Customer's Name"];
	string firstLastName = 2 [description = "Customer's FirstLastName"];
	string secondLastName = 3 [description = "Customer's SecondLastName", deprecated = true];
	guid customerProfileId = 4 [optional = true, description = "Customer's Profile Id, can be null"];
	CustomerProfileDto customerProfile = 5;
	repeated OrderDto orders = 6;
	guid id = 7;
	datetime createDate = 8 [optional = true];
	datetime updateDate = 9 [optional = true];
}

message CustomerProfileDto {
	string name = 1;
	guid id = 2;
	datetime createDate = 3 [optional = true];
	datetime updateDate = 4 [optional = true];
}

message OrderDto {
	string description = 1;
	guid customerId = 2;
	int32 orderStateId = 3;
	OrderTypeEnum orderType = 4;
	OrderStateDto orderState = 5;
	repeated OrderItemDto items = 6;
	guid id = 7;
	datetime createDate = 8 [optional = true];
	datetime updateDate = 9 [optional = true];
}

enum OrderTypeEnum {
	option description = "Enum Type Description";

	Default = 0 [description = "Default"];
	Normal = 1 [description = "Normal"];
	Shipping = 2 [description = "Shipping"];
}

message OrderStateDto {
	string name = 1;
	int32 id = 2;
}

message OrderItemDto {
	string productName = 1;
	float price = 2;
	float discount = 3 [optional = true];
	guid orderId = 4;
	guid id = 5;
}



message GetAllRequest {
	string filter = 1 [optional = true];
	string sort = 2 [optional = true];
	int32 skip = 3 [optional = true];
	int32 take = 4 [optional = true];
}


// **************************** START Customer **********************************************

message GetCustomerRequest {
	guid id = 1;
}

message UpdateCustomerRequest {
	guid id = 1;
	CustomerDto value = 2 [(ts).partial = true];
}

message DeleteCustomerRequest{
	guid id = 1;
}

message GetAllCustomerResponse {
	repeated CustomerDto items = 1;
	int64 page = 2;
	int64 totalPages = 3;
	int64 totalCount = 4;
}

message CreateCustomerRequest {
	CustomerDto value = 1 [(ts).partial = true];
}

service CustomerService {
	option (prefix) ="api/Customer";

	rpc GetAll(GetAllRequest) returns (GetAllCustomerResponse){		
		option method = "GET";
		
	};

	rpc Get(GetCustomerRequest) returns (CustomerDto){	
		option template = "{id}"; 
		option method = "GET";
		
	};

	rpc Create(CreateCustomerRequest) returns (CustomerDto){			
		option method = "POST";
		
	};

	rpc Update(UpdateCustomerRequest) returns (CustomerDto){			
		option template = "{id}"; 
		option method = "PUT";
		
	};

	rpc Delete(DeleteCustomerRequest) returns (void){
		option template = "{id}"; 
		option method = "DELETE";
		
	};
}

// **************************** END Customer **********************************************

// **************************** START Order **********************************************

message GetOrderRequest {
	guid id = 1;
}

message UpdateOrderRequest {
	guid id = 1;
	OrderDto value = 2 [(ts).partial = true];
}

message DeleteOrderRequest{
	guid id = 1;
}

message GetAllOrderResponse {
	repeated OrderDto items = 1;
	int64 page = 2;
	int64 totalPages = 3;
	int64 totalCount = 4;
}

message CreateOrderRequest {
	OrderDto value = 1 [(ts).partial = true];
}

service OrderService {
	option (prefix) ="api/Order";

	rpc GetAll(GetAllRequest) returns (GetAllOrderResponse){		
		option method = "GET";
		
	};

	rpc Get(GetOrderRequest) returns (OrderDto){	
		option template = "{id}"; 
		option method = "GET";
		
	};

	rpc Create(CreateOrderRequest) returns (OrderDto){			
		option method = "POST";
		
	};

	rpc Update(UpdateOrderRequest) returns (OrderDto){			
		option template = "{id}"; 
		option method = "PUT";
		
	};

	rpc Delete(DeleteOrderRequest) returns (void){
		option template = "{id}"; 
		option method = "DELETE";
		
	};
}

// **************************** END Order **********************************************

// **************************** START OrderState **********************************************

message GetOrderStateRequest {
	int32 id = 1;
}

message UpdateOrderStateRequest {
	int32 id = 1;
	OrderStateDto value = 2 [(ts).partial = true];
}

message DeleteOrderStateRequest{
	int32 id = 1;
}

message GetAllOrderStateResponse {
	repeated OrderStateDto items = 1;
	int64 page = 2;
	int64 totalPages = 3;
	int64 totalCount = 4;
}

message CreateOrderStateRequest {
	OrderStateDto value = 1 [(ts).partial = true];
}

service OrderStateService {
	option (prefix) ="api/OrderState";

	rpc GetAll(GetAllRequest) returns (GetAllOrderStateResponse){		
		option method = "GET";
		
	};

	rpc Get(GetOrderStateRequest) returns (OrderStateDto){	
		option template = "{id}"; 
		option method = "GET";
		
	};

	rpc Create(CreateOrderStateRequest) returns (OrderStateDto){			
		option method = "POST";
		
	};

	rpc Update(UpdateOrderStateRequest) returns (OrderStateDto){			
		option template = "{id}"; 
		option method = "PUT";
		
	};

	rpc Delete(DeleteOrderStateRequest) returns (void){
		option template = "{id}"; 
		option method = "DELETE";
		
	};
}

// **************************** END OrderState **********************************************